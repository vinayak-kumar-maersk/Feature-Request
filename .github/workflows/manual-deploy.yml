name: Manually Deploy with build artifact on Azure K8s Cluster
on:
  workflow_dispatch:
    inputs:
      env:
        type: choice
        description: 'Choose the env to deploy'     
        required: true
        default: 'dev'
        options: 
        - dev
        - cdt
        - prod
      buildArtifact:
        description: 'Enter the build tag to deploy'     
        required: true
        default: ''

env:
  APP_NAME: Anchor
  NAMESAPCE: &lt;NAMESPACE&gt;
  PRODUCT: &lt;PRODUCT&gt;
  EXTERNAL_DNS: 
  
jobs:   
  set-clusters:
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ github.event.inputs.env == 'prod' && steps.set-prod-matrix.outputs.matrix || github.event.inputs.env == 'cdt' && steps.set-cdt-matrix.outputs.matrix || steps.set-dev-matrix.outputs.matrix }}
    steps:
      - name: set prod matrix
        if: github.event.inputs.env == 'prod'
        id: set-prod-matrix
        run: echo "::set-output name=matrix::{\"include\":[{\"cluster\":\"<REPLACE_PROD_CLUSTER>\",\"environment\":\"prod\"}]}"
        
      - name: set dev matrix
        if: github.event.inputs.env == 'dev'
        id: set-dev-matrix
        run: echo "::set-output name=matrix::{\"include\":[{\"cluster\":\"&lt;CLUSTER&gt;\",\"environment\":\"dev\"}]}"
        
      - name: set cdt matrix
        if: github.event.inputs.env == 'cdt'
        id: set-cdt-matrix
        run: echo "::set-output name=matrix::{\"include\":[{\"cluster\":\"<REPLACE_CDT_CLUSTER>\",\"environment\":\"cdt\"}]}"
        
  check-matrix:
    runs-on: ubuntu-20.04
    needs: set-clusters
    steps:
      - name: Install json2yaml
        run: |
          sudo npm install -g json2yaml
        
      - name: Check matrix definition
        run: |
          matrix='${{ needs.set-clusters.outputs.matrix }}'
          echo $matrix
          echo $matrix | jq .
          echo $matrix | json2yaml

  deploy:
    runs-on: ubuntu-20.04
    environment: ${{ github.event.inputs.env }}
    needs: [set-clusters,check-matrix]
    timeout-minutes: 10
    name: deploy

    strategy:
      matrix: ${{fromJson(needs.set-clusters.outputs.matrix)}}

    steps:
      - name: Check out code
        uses: actions/checkout@v2
     
      - name: set prod domain
        if: github.event.inputs.env == 'prod'
        run: echo "DOMAIN=${{env.APP_NAME}}.maersk-digital.net" >> $GITHUB_ENV
        
      - name: set dev domain
        if: github.event.inputs.env == 'dev'
        run: echo "DOMAIN=${{env.APP_NAME}}.dev.maersk-digital.net" >> $GITHUB_ENV
        
      - name: set cdt domain
        if: github.event.inputs.env == 'cdt'
        run: echo "DOMAIN=${{env.APP_NAME}}.cdt.maersk-digital.net" >> $GITHUB_ENV
        
      - name: Docker image in Kubernetes Manifest
        run: |
          sed -i "s#__DOCKER_IMAGE_NAME__#${{ github.event.inputs.buildArtifact }}#g" aks/deploy.yml
          sed -i "s#__DOMAIN__#${{ env.DOMAIN }}#g" aks/*
          sed -i "s#__DNS__#${{ env.EXTERNAL_DNS }}#g" aks/ingress.yml
          sed -i "s#__APP_NAME__#${{ env.APP_NAME }}#g" aks/*
          sed -i "s#__NAMESPACE__#${{ env.NAMESAPCE }}#g" aks/*
          sed -i "s#__PRODUCT__#${{ env.PRODUCT }}#g" aks/*
          sed -i "s#__AZURE_AD_CLIENT_ID__#${{ secrets.AZURE_AD_CLIENT_ID }}#g" aks/configmap.yml
          sed -i "s#__AZURE_AD_CLIENT_SECRET__#${{ secrets.AZURE_AD_CLIENT_SECRET }}#g" aks/configmap.yml
          sed -i "s#__AZURE_AD_TENANT_ID__#${{ secrets.AZURE_AD_TENANT_ID }}#g" aks/configmap.yml
 
      - name: Import Secrets
        uses: hashicorp/vault-action@v2.3.0
        id: k8ssecrets
        with:
          url: https://vault.maersk-digital.net
          tlsSkipVerify: false
          exportEnv: false
          # exportToken: true  - optionally export the VAULT_TOKEN
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_ROLE_SECRET_ID }}
          secrets: |
            ${{ env.PRODUCT }}-kv/data/kubernetes/${{ matrix.cluster }}/cert cert;
            ${{ env.PRODUCT }}-kv/data/kubernetes/${{ matrix.cluster }}/token token;
            ${{ env.PRODUCT }}-kv/data/kubernetes/${{ matrix.cluster }}/server server;
 
      - name: set kubernetes cluster context for ${{ matrix.cluster }}
        run: |
          kubectl config set-credentials default --token=${{ steps.k8ssecrets.outputs.token }};
          echo ${{ steps.k8ssecrets.outputs.cert }} | base64 -d > ./kubectl-ca.crt;
          kubectl config set-cluster default --server=${{ steps.k8ssecrets.outputs.server }} --certificate-authority=./kubectl-ca.crt;
          kubectl config set-context default --cluster=default --user=default;
          kubectl config use-context default;
 
      - name: Deploy to cluster ${{ matrix.cluster }} and env ${{ matrix.environment }}
        run: |
          kubectl apply -R -f aks
